version: '3.7'
services:
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Mugisha12!
      POSTGRES_DB: order_service_db
      PGDATA: /data/postgres
    volumes:
      - ./postgres-order:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: >
      bash -c "
      mkdir -p /var/lib/postgresql/data && 
      chmod -R 0700 /var/lib/postgresql/data && 
      chown -R postgres:postgres /var/lib/postgresql/data && 
      postgres -D /var/lib/postgresql/data -p 5431"
    restart: always


  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Mugisha12!
      POSTGRES_DB: inventory_service_db
      PGDATA: /data/postgres
    volumes:
      - ./postgres-inventory:/data/postgres
    ports:
      - "5432:5432"
    restart: always
    command: >
      bash -c "
      mkdir -p /var/lib/postgresql/data && 
      chmod -R 0700 /var/lib/postgresql/data && 
      chown -R postgres:postgres /var/lib/postgresql/data && 
      postgres -D /var/lib/postgresql/data -p 5432"

  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo:/data/db

  postgres-keycloak:
    container_name: postgres-keycloak
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Mugisha12!
      POSTGRES_DB: keycloak
      PGDATA: /data/postgres
    volumes:
      - ./postgres-keycloak:/data/postgres

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:18.0.0
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: postgres
      DB_PASSWORD: Mugisha12!
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
        - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - postgres-keycloak


  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.0.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1


  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  discovery-service:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    environment:
        SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - zipkin

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8181:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - discovery-service
      - zipkin
      - keycloak

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - discovery-service
      - zipkin
      - api-gateway
      - mongo

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - discovery-service
      - zipkin
      - api-gateway
      - postgres-order
      - broker


  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - discovery-service
      - zipkin
      - api-gateway
      - postgres-inventory
      - broker

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - discovery-service
      - zipkin
      - api-gateway
      - broker